generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  email       String        @unique
  name        String
  password    String
  otp         String
  customers   Customer[]
  services    Services[]
  paidHistory PaidHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  address String
  number  String
  email   String
  userId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Restrict)

  services    Services[]
  paidHistory PaidHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model ServiceName {
//   id     String @id @default(auto()) @map("_id") @db.ObjectId
//   name   String
//   userId String @db.ObjectId
//   user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Restrict)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Services {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceName  String
  customerCost Int
  paidAmount   Int
  actualCost   Int
  status       String
  customerId   String   @db.ObjectId
  customer     Customer @relation(fields: [customerId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PaidHistory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  amount     Int
  customerId String   @db.ObjectId
  customer   Customer @relation(fields: [customerId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
